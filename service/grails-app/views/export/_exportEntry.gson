import groovy.transform.Field
import org.olf.erm.Entitlement
import org.olf.kb.ErmResource
import org.olf.kb.PackageContentItem
import org.olf.kb.PlatformTitleInstance
import org.olf.kb.TitleInstance
import org.olf.kb.Platform

final Object[] tuple = binding.variables.values()[0]

boolean via_package = false
final ErmResource resource = tuple[0] as ErmResource
Entitlement ent
TitleInstance ti
Platform platform
String depth
String note
String url

switch (resource) {
  case { it instanceof PackageContentItem}:
    via_package = tuple[1]
    ent = (via_package ? tuple[1] : tuple[2]) as Entitlement
    ti = ((PackageContentItem)resource).pti.titleInstance
    platform = ((PackageContentItem)resource).pti.platform
    url = ((PackageContentItem)resource).pti.url
    
    depth = ((PackageContentItem)resource).depth
    note = ((PackageContentItem)resource).note
    break
  case { it instanceof PlatformTitleInstance}:
    ti = ((PlatformTitleInstance)resource).titleInstance
    platform = ((PlatformTitleInstance)resource).platform
  case { it instanceof TitleInstance}:
    ti = resource as TitleInstance
  
    // These resources can only be directly associated.
    via_package = false
    ent = tuple[2] as Entitlement
    break
}

//final Map<String,?> result = ['title': ti, entitlement: ent]

// We probably don't actually want to do this, but this gives us an Idea of what is happening.
//json g.render(result)

json {
  if (via_package) {
    final def pkg = ent.resource
    
    "package" {
       id pkg.id
       name pkg.name 
    }
    
     
  }
  if (platform) {
     g.render(platform)
  }
  if (note) {
     g.render(note)
  } 
  title g.render(ti, [expand: ['identifiers', 'type', 'subType', 'coverage', 'platformInstances'], excludes: ['entitlements']])
  
   
}