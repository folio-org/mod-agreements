import groovy.transform.Field
import org.olf.erm.Entitlement
import org.olf.kb.ErmResource
import org.olf.kb.PackageContentItem
import org.olf.kb.PlatformTitleInstance
import org.olf.kb.TitleInstance
import org.olf.kb.Platform

final Object[] tuple = binding.variables.values()[0]

boolean via_package = false
final ErmResource resource = tuple[0] as ErmResource
Entitlement ent
TitleInstance ti
Platform the_platform
String the_depth
String the_note
String the_url

switch (resource) {
  case { it instanceof PackageContentItem}:
    via_package = tuple[1]
    ent = (via_package ? tuple[1] : tuple[2]) as Entitlement
    ti = ((PackageContentItem)resource).pti.titleInstance
    the_platform = ((PackageContentItem)resource).pti.platform
    the_url = ((PackageContentItem)resource).pti.url
    
    the_depth = ((PackageContentItem)resource).depth
    the_note = ((PackageContentItem)resource).note
    break
  case { it instanceof PlatformTitleInstance}:
    ti = ((PlatformTitleInstance)resource).titleInstance
    the_platform = ((PlatformTitleInstance)resource).platform
    the_url = ((PlatformTitleInstance)resource).url
    
  case { it instanceof TitleInstance}:
    ti = resource as TitleInstance
  
    // These resources can only be directly associated.
    via_package = false
    ent = tuple[2] as Entitlement
    break
}

 
Map customCoverageMap = request?.getAttribute("${controllerName}.${actionName}.customCoverage") as Map 

// Check for custom coverage on this resource.
List customCoverageList = customCoverageMap?.get("${resource.id}") 

json {
  if (via_package) {
    final def pkg = ent.resource
    
    "package" {
       id pkg.id
       name pkg.name 
    }
  }
  

  if (the_platform) {
     platform g.render(the_platform)
  }
  
  if (the_note) {
     note the_note
  }
  
  if (the_url) {
     url the_url
  }
  
  if (the_depth) {
    depth the_depth 
  }
  
  if (customCoverageList) {
    
    'coverage' g.render (customCoverageList)
    'customCoverage' true
    
  } else if (resource.coverage) {
    
    'coverage' g.render (resource.coverage)
    'customCoverage' false
     
  } else {
    'coverage' []
    'customCoverage' false
  }
  
  title g.render(ti, [expand: ['identifiers', 'type', 'subType'], excludes: ['entitlements', 'coverage', 'work', 'platformInstances']])

}

