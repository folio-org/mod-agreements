import groovy.transform.*
import groovyx.net.http.HttpException
import java.util.concurrent.ExecutionException
import java.util.concurrent.Future
import org.olf.erm.Entitlement

@Field Entitlement entitlement

if (entitlement.type == 'external') {
  json tmpl."externalEntitlement"(entitlement)
} else {
  final def should_expand = ['poLines', 'resource', 'tags' ]
  final def should_exclude = []
  boolean renderOwnerSnippet = true
  if ( controllerName != 'subscriptionAgreement' ) {
    should_expand << 'owner'
    renderOwnerSnippet = false
  } else {
    should_exclude << 'owner'
  }
  
  json g.render(entitlement, [expand: should_expand, excludes: should_exclude]) {
        
    if (entitlement.coverage) {
      
      'coverage' g.render (entitlement.coverage)
      'customCoverage' true
       
    } else if (entitlement?.resource?.coverage) {
      'coverage' g.render (entitlement?.resource?.coverage)
      'customCoverage' false
      
    } else {
      'coverage' []
      'customCoverage' false
    }
    
    if (renderOwnerSnippet) {
      'owner' g.render(entitlement.owner, [includes: ['id', 'name']])
    }
    
    'explanation' entitlement.getExplanation()
    'startDate' entitlement.activeFrom
    'endDate' entitlement.activeTo
    'activeFrom' entitlement.activeFrom
    'activeTo' entitlement.activeTo
    'contentUpdated' entitlement.getContentUpdated()
    'haveAccess' entitlement.getHaveAccess()
    'suppressFromDiscovery' entitlement.suppressFromDiscovery
  }
}
