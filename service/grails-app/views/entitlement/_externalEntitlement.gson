import java.util.concurrent.ExecutionException
import java.util.concurrent.Future

import org.olf.erm.Entitlement

import com.k_int.okapi.remote_resources.OkapiLookup

import groovy.transform.*
import groovyx.net.http.HttpException

@Field Entitlement entitlement
final String objectProperty = 'reference_object'
def remoteObjValue
if(entitlement.respondsTo(objectProperty)){
  try {
    remoteObjValue = entitlement.invokeMethod(objectProperty, null)
    if (remoteObjValue instanceof Future) {
      remoteObjValue = (remoteObjValue as Future)?.get()
    }
  } catch (ExecutionException e) {
    
    if (e.cause instanceof HttpException) {
      HttpException httpEx = e.cause as HttpException
      remoteObjValue = [error: httpEx.statusCode, message: httpEx.message ]
    } else {
      remoteObjValue = [error: e.class.name, message: e.message]
    }
  }
}

json {
  'id' entitlement.id
  'type' 'external'
  'authority' entitlement.getAuthority()
  'reference' entitlement.getReference()  
  'explanation' entitlement.getExplanation()
  'startDate' entitlement.getActiveFrom()
  'endDate' entitlement.getActiveTo()
  'contentUpdated' entitlement.getContentUpdated()
  'haveAccess' entitlement.getHaveAccess()
  
  if (entitlement.hasProperty('external_customCoverage')) {
    'customCoverage' entitlement.getAt('external_customCoverage')
  }
  
  if (entitlement.coverage) {
    'coverage' g.render (entitlement.coverage)
  }
  
  if (remoteObjValue) {
    call( objectProperty, remoteObjValue )
  }
}
